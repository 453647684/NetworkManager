# test-cert.p12 created with:
#
# openssl pkcs12 -export \
# -in test_key_and_cert.pem \
# -inkey test_key_and_cert.pem \
# -certfile test_ca_cert.pem \
# -name "test-pkcs12" \
# -out test-cert.p12

enums_header = files('test-general-enums.h')
enums = 'nm-core-tests-enum-types'

enums_h = gnome.mkenums(
  enums + '.h',
  sources: enums_header,
  identifier_prefix: 'NM',
  fhead: '/* Generated by glib-mkenums. Do not edit */\n\n#ifndef __NM_CORE_TESTS_ENUM_TYPES_H__\n#define __NM_CORE_TESTS_ENUM_TYPES_H__\n\n#include <glib-object.h>\n\nG_BEGIN_DECLS\n',
  vhead: 'GType @enum_name@_get_type (void) G_GNUC_CONST;\n#define @ENUMPREFIX@_TYPE_@ENUMSHORT@ (@enum_name@_get_type ())\n',
  ftail: 'G_END_DECLS\n\n#endif /* __NM_CORE_TESTS_ENUM_TYPES_H__ */'
)

enums_c = gnome.mkenums(
  enums + '.c',
  sources: enums_header,
  identifier_prefix: 'NM',
  fhead: '/* Generated by glib-mkenums. Do not edit */\n\n#include "config.h"\n\n#include "nm-core-tests-enum-types.h"\n\n#include "test-general-enums.h" \n\n',
  vhead: 'GType\n@enum_name@_get_type (void)\n{\n  static volatile gsize g_define_type_id__volatile = 0;\n\n  if (g_once_init_enter (&g_define_type_id__volatile))\n    {\n      static const G@Type@Value values[] = {\n',
  vprod: '        { @VALUENAME@, "@VALUENAME@", "@valuenick@" },',
  vtail: '        { 0, NULL, NULL }\n      };\n      GType g_define_type_id =\n        g_@type@_register_static (g_intern_static_string ("@EnumName@"), values);\n      g_once_init_leave (&g_define_type_id__volatile, g_define_type_id);\n    }\n\n  return g_define_type_id__volatile;\n}\n'
)

test_units = [
  'test-compare',
  'test-crypto',
  'test-general',
  'test-keyfile',
  'test-secrets',
  'test-setting',
  'test-settings-defaults'
]

incs = [
  top_inc,
  shared_inc,
  libnm_core_inc
]

test_cert_dir = join_paths(meson.current_source_dir(), 'certs')

cflags = '-DTEST_CERT_DIR="@0@"'.format(test_cert_dir)

foreach test_unit: test_units
  exe = executable(
    'libnm-core-' + test_unit,
    [test_unit + '.c', enums_c, enums_h],
    include_directories: incs,
    dependencies: glib_dep,
    c_args: cflags,
    link_with: libnm_core
  )

  test(test_unit, exe)
endforeach
