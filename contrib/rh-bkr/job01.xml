<job $JOBTYPE>
	<whiteboard>
		$WHITEBOARD $UUID
	</whiteboard>
	<recipeSet priority="Normal">
		<recipe kernel_options="$SELINUX_DISABLED" kernel_options_post="" ks_meta="" role="None" whiteboard="$WHITEBOARD $UUID $ARGV $ARGV_PROFILE">
			<autopick random="true"/>
			<watchdog panic="None"/>
			<packages/>
			<ks_appends>
				<ks_append><![CDATA[
%packages
# SELinux forbids dumping cores to /, ABRT comes to the rescue
# and collects them
abrt-tui
abrt-addon-ccpp
libreport-rhel-bugzilla
%end

%post --log=/dev/console --erroronfail
set -x
set -e

# Allow ABRT to collect cores from our poor unsigned packages
sed 's/^OpenGPGCheck.*/OpenGPGCheck = no/' -i /etc/abrt/abrt-action-save-package-data.conf

sed -i -e 's/^ *\(Storage\|SystemMaxUse\|RateLimitBurst\|RateLimitInterval\)=.*/#\0/' \
	-e '$$a\Storage=persistent' \
	-e '$$a\SystemMaxUse=2G' \
	-e '$$a\RateLimitBurst=0/' \
	-e '$$a\RateLimitInterval=0/' \
	/etc/systemd/journald.conf ;

mkdir -p /etc/NetworkManager/conf.d/
cat >/etc/NetworkManager/conf.d/99-test.conf <<EOF
[main]
debug=$CONF_DEBUG
dhcp=$CONF_DHCP

[logging]
level=$CONF_LOGLEVEL
domains=ALL
EOF

#A workaround for rdma machine post-deploy script woes, suggested by honli
sed -e '/^\s*linux16\s*\/vmlinuz/ s/$/ $SELINUX_DISABLED/' -i /boot/grub2/grub.cfg || :
rm -f /etc/sysconfig/network-scripts/ifcfg-mlx*

yum downgrade -y yum $RPM_LIST || yum install -y yum $RPM_LIST

if [[ -n "$BUILD_ID" ]]; then

    yum install -y git rpm-build valgrind dbus-devel dbus-glib-devel wireless-tools-devel glib2-devel gobject-introspection-devel gettext-devel pkgconfig libnl3-devel 'perl(XML::Parser)' 'perl(YAML)' automake ppp-devel nss-devel dhclient readline-devel audit-libs-devel gtk-doc libudev-devel libuuid-devel libgudev1-devel vala-tools iptables bluez-libs-devel systemd libsoup-devel libndp-devel ModemManager-glib-devel newt-devel /usr/bin/dbus-launch pygobject3-base dbus-python libselinux-devel polkit-devel teamd-devel

    mkdir /root/nm-build
    cd /root/nm-build

    git clone "$BUILD_REPO"
    cd "./NetworkManager/"
    git checkout "$BUILD_ID"

    # for the tests, let's load some modules:
    modprobe ip_gre

    if [[ "$BUILD_TEST" != "" ]]; then
        NOCONFIGURE=yes ./autogen.sh

        ./configure \
            --enable-maintainer-mode \
            --enable-more-warnings=error \
            --prefix=/opt/test \
            --sysconfdir=/etc \
            --enable-gtk-doc \
            --enable-more-asserts \
            --with-more-asserts=100 \
            --enable-more-logging \
            --enable-compile-warnings=yes\
            --with-valgrind=no \
            --enable-concheck \
            --enable-ifcfg-rh \
            --enable-ifcfg-suse \
            --enable-ifupdown \
            --enable-ifnet \
            --enable-vala=yes \
            --enable-polkit=yes \
            --with-nmtui=yes \
            --with-modem-manager-1 \
            --with-suspend-resume=systemd \
            --enable-teamdctl=yes \
            --enable-tests=root \
            --with-netconfig=yes \
            --with-crypto=nss \
            --with-session-tracking=systemd \
            --with-consolekit=yes \
            --with-systemd-logind=yes \
            --with-consolekit=yes

        make -j4
        make check -k
    fi

    ./contrib/fedora/rpm/build_clean.sh -c

    pushd "./contrib/fedora/rpm/latest/RPMS/$ARCH/"
        for p in $$(ls -1 ./*.rpm | sed 's#.*\(NetworkManager.*\)-1\.[0-9]\..*#\1#'); do
            rpm -e --nodeps $$p || true
        done
        yum install -y ./*.rpm
    popd

    # ensure that the expected NM is installed.
    COMMIT_ID="$$(git rev-parse --verify HEAD | sed 's/^\(.\{10\}\).*/\1/')"
    yum list installed NetworkManager | grep -q -e "\.$$COMMIT_ID\."

    echo "BUILD '$BUILD_ID' COMPLETE"
fi
%end
]]>
				</ks_append>
			</ks_appends>
			<repos/>
			<distroRequires>
				<and>
					$DISTROREQUIRES
					<distro_variant op="=" value="$DISTRO_VARIANT"/>
					<distro_method op="=" value="$DISTRO_METHOD"/>
					<distro_arch op="=" value="$ARCH"/>
				</and>
			</distroRequires>
			<hostRequires>
				<and>
					<arch op="=" value="$ARCH"/>
					<!-- default -->    <!-- <group op="=" value="desktopqe-net"/> -->
					<!-- veth -->       <!-- <group op="=" value="desktop"/> -->
					<!-- dcb -->        <!-- <hostname op="=" value="wsfd-netdev7.lab.bos.redhat.com"/> -->
					<!-- infiniband --> <!-- <group op="=" value="RDMA - ib0"/> -->
					<!-- wifi -->       <!-- <group op="=" value="wireless"/><hostname op="like" value="wlan-r2%.wlan.rhts.eng.bos.redhat.com"/> -->
					<!-- wifi -->       <!-- <hostname op="=" value="wlan-r2s26.wlan.rhts.eng.bos.redhat.com"/> -->
					$HOSTREQUIRES
				</and>
				<system_type value="Machine"/>
			</hostRequires>
			<partitions/>
			<task name="/distribution/pkginstall" role="STANDALONE">
				<params>
					<param name="PKGARGNAME" value="python-setuptools python-netaddr pexpect bash-completion iw net-tools teamd NetworkManager radvd wireshark git firewalld psmisc bridge-utils"/>
				</params>
			</task>
			<task name="/qe/desktop/simpletestharness" role="STANDALONE">
				<params>
					<param name="GIT_TARGETBRANCH" value="$GIT_TARGETBRANCH"/>
					<param name="TESTS" value="$TESTS"/>
					<param name="TEST_MAPPER" value="True"/>
					<param name="COMPONENT" value="NetworkManager"/>
					<param name="GIT_URL" value="$GIT_URL"/>
					<param name="TYPE" value="TEST"/>
				</params>
			</task>
			<task name="/distribution/command" role="STANDALONE">
				<params>
					<param name="CMDS_TO_RUN" value="journalctl -b &gt; /tmp/journal_all.log; rhts-submit-log -l '/tmp/journal_all.log'"/>
				</params>
			</task>
			$RESERVESYS
		</recipe>
	</recipeSet>
</job>

